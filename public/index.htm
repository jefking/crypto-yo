<!DOCTYPE html>
<meta charset="utf-8">
<html>

<head>
    <title>Crypto BRO</title>
    <link rel="stylesheet" href="/app.css">
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"></script>
</head>
<script type="module">
    import { defineComponent } from 'vue'
    import { NConfigProvider, NInput, NDatePicker, NSpace } from 'naive-ui'
    // theme
    import { createTheme, inputDark, datePickerDark } from 'naive-ui'
    // locale & dateLocale
    import { enUS, dateEnUS } from 'naive-ui'

    const app = defineComponent({
        components: {
            NConfigProvider,
            NInput,
            NDatePicker,
            NSpace
        },
        setup() {
            return {
                darkTheme: createTheme([inputDark, datePickerDark]),
                locale: enUS,
                dateLocale: dateEnUS
            }
        }
    })

    // ... rest of your Vue app code
</script>

<template>
    <n-config-provider :theme="darkTheme" :locale="locale" :date-locale="dateLocale">
        <n-space vertical>
            <n-input />
            <n-date-picker />
        </n-space>
    </n-config-provider>
</template>

<body>
    <div id="app">
        <h1>Bitcoin Price Index</h1>
        <div v-for="currency in info" class="currency">
            {{ currency.description }}:
            <span class="lighten">
                <span v-html="currency.symbol"></span>{{ currency.rate_float | currencydecimal }}
            </span>
        </div>
        <div id="cryptoVis"></div>
    </div>
    <script>
        const app = Vue.createApp({
            data() {
                return {
                    info: [],
                    graphData: [] // Added to store data for the graph
                }
            },
            methods: {
                usdFilter(value) {
                    return value.code === 'USD';
                },
                fetchData() {
                    axios
                        .get('https://api.coindesk.com/v1/bpi/currentprice.json')
                        .then(response => {
                            this.info = Object.values(response.data.bpi).filter(this.usdFilter);
                            this.drawGraph(); // Call to draw the graph after data is fetched
                        })
                        .catch(error => {
                            console.error("Error fetching data:", error); // Log any errors
                        });
                },
                drawGraph() {
                    // D3.js graph drawing logic here
                    // Ensure this function is called after data is fetched
                }
            },
            mounted() {
                this.fetchData(); // Fetch data when the component is mounted
            }
        });

        app.mount('#app');
        // set the dimensions and margins of the graph
        var margin = { top: 10, right: 30, bottom: 30, left: 60 },
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#cryptoVis")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        //Read the data
        d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",

            // When reading the csv, I must format variables:
            function (d) {
                return { date: d3.timeParse("%Y-%m-%d")(d.date), value: d.value }
            },

            // Now I can use this dataset:
            function (data) {

                // Add X axis --> it is a date format
                var x = d3.scaleTime()
                    .domain(d3.extent(data, function (d) { return d.date; }))
                    .range([0, width]);
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));

                // Add Y axis
                var y = d3.scaleLinear()
                    .domain([0, d3.max(data, function (d) { return +d.value; })])
                    .range([height, 0]);
                svg.append("g")
                    .call(d3.axisLeft(y));

                // Add the line
                svg.append("path")
                    .datum(data)
                    .attr("fill", "none")
                    .attr("stroke", "steelblue")
                    .attr("stroke-width", 1.5)
                    .attr("d", d3.line()
                        .x(function (d) { return x(d.date) })
                        .y(function (d) { return y(d.value) })
                    )

            })
    </script>
</body>

</html>