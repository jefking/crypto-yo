<!DOCTYPE html>
<meta charset="utf-8">
<html>

<head>
    <title>Crypto BRO</title>
    <link rel="stylesheet" href="/app.css">
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"></script>
</head>
<script type="module">
    import { defineComponent } from 'vue'
    import { NConfigProvider, NInput, NDatePicker, NSpace } from 'naive-ui'
    // theme
    import { createTheme, inputDark, datePickerDark } from 'naive-ui'
    // locale & dateLocale
    import { enUS, dateEnUS } from 'naive-ui'

    const vueApp = defineComponent({
        components: {
            NConfigProvider,
            NInput,
            NDatePicker,
            NSpace
        },
        setup() {
            return {
                darkTheme: createTheme([inputDark, datePickerDark]),
                locale: enUS,
                dateLocale: dateEnUS
            }
        }
    })
</script>

<template>
    <n-config-provider :theme="darkTheme" :locale="locale" :date-locale="dateLocale">
        <n-space vertical>
            <n-input />
            <n-date-picker />
        </n-space>
    </n-config-provider>
</template>

<body>
    <div id="app">
        <h1>Price Index</h1>
        <div v-for="currency in info" class="currency">
            {{ currency.description }}:
            <span class="lighten">
                <span v-html="currency.symbol"></span>{{ currency.rate_float | currencydecimal }}
            </span>
        </div>
        <div id="cryptoVis"></div>
    </div>
    <script>
        const vueInstance = Vue.createApp({
            data() {
                return {
                    info: [],
                    graphData: [] // Added to store data for the graph
                }
            },
            methods: {
                usdFilter(value) {
                    return value.code === 'USD';
                },
                fetchData() {
                    axios
                        .get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,solana&vs_currencies=usd')
                        .then(response => {
                            // Extract latest prices for Bitcoin, Ethereum, and Solana
                            this.info = [
                                {
                                    code: 'BTC',
                                    description: 'Bitcoin',
                                    rate_float: response.data.bitcoin.usd, // Latest price for Bitcoin
                                    symbol: '$'
                                },
                                {
                                    code: 'ETH',
                                    description: 'Ethereum',
                                    rate_float: response.data.ethereum.usd, // Latest price for Ethereum
                                    symbol: '$'
                                },
                                {
                                    code: 'SOL',
                                    description: 'Solana',
                                    rate_float: response.data.solana.usd, // Latest price for Solana
                                    symbol: '$'
                                }
                            ];

                            // Fetch historical data for Bitcoin, Ethereum, and Solana
                            return axios.get('https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=7');
                        })
                        .then(response => {
                            this.drawGraph(response.data.prices); // Pass historical prices to drawGraph
                        })
                        .catch(error => {
                            console.error("Error fetching data:", error); // Log any errors
                        });
                },
                drawGraph(prices) {
                    // Clear any existing SVG elements
                    d3.select("#cryptoVis").selectAll("*").remove();

                    // Set the dimensions and margins of the graph
                    var margin = { top: 10, right: 30, bottom: 30, left: 60 },
                        width = window.innerWidth - margin.left - margin.right, // Full width minus margins
                        height = window.innerHeight - margin.top - margin.bottom; // Full height minus margins

                    // Append the svg object to the body of the page
                    var svg = d3.select("#cryptoVis")
                        .append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    // Prepare the data for the graph
                    var data = prices.map((price, index) => ({
                        date: new Date(Date.now() - (6 - index) * 24 * 60 * 60 * 1000), // Calculate the date for each price
                        value: price[1],
                        description: index === 0 ? 'Bitcoin' : index === 1 ? 'Ethereum' : 'Solana'
                    }));

                    // Add X axis --> it is a date format
                    var x = d3.scaleTime()
                        .domain(d3.extent(data, function (d) { return d.date; }))
                        .range([0, width]);
                    svg.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x));

                    // Add Y axis
                    var y = d3.scaleLinear()
                        .domain([0, d3.max(data, function (d) { return d.value; })])
                        .range([height, 0]);
                    svg.append("g")
                        .call(d3.axisLeft(y));

                    // Add the line
                    svg.append("path")
                        .datum(data)
                        .attr("fill", "none")
                        .attr("stroke", "steelblue")
                        .attr("stroke-width", 1.5)
                        .attr("d", d3.line()
                            .x(function (d) { return x(d.date) })
                            .y(function (d) { return y(d.value) })
                        );

                    // Add points
                    svg.selectAll("dot")
                        .data(data)
                        .enter()
                        .append("circle")
                        .attr("cx", function (d) { return x(d.date); })
                        .attr("cy", function (d) { return y(d.value); })
                        .attr("r", 2)
                        .attr("fill", "lightsteelblue");

                    // Add labels
                    svg.selectAll("text")
                        .data(data)
                        .enter()
                        .append("text")
                        .attr("x", function (d) { return x(d.date); })
                        .attr("y", function (d) { return y(d.value) - 10; })
                        .text(function (d) { return d.description; })
                        .attr("font-size", "12px")
                        .attr("fill", "black");
                }
            },
            mounted() {
                this.fetchData(); // Fetch data when the component is mounted
            }
        });

        vueInstance.mount('#app');
    </script>
</body>

</html>